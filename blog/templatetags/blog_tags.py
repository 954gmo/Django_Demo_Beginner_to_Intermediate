# -*- encoding:utf-8 -*-
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

__ENTITY_author__ = "SIX DIGIT INVESTMENT GROUP"
__author__ = "GWONGZAN"

from django import template
from django.db.models import Count
from blog.models import Post
from django.utils.safestring import mark_safe
import markdown


# after adding a new template tags module, you will need to restart the Django development server
# in order to use the new tags and filters


# Before using custom template tags, you have to make them available for the template
# using the {% load %} tag.
# you need to use the name of the Python module containing your template tags and filters.


# each module that contains template tags needs to define a variable called
# register to be a valid tag library.
# it is used to register your own template tags and filters
register = template.Library()


# define a tag called total_posts with a Python function and
# use @register.simple_tag decorator to register the function as a simple tag.
# Django will use the function's name as the tag name,
# if you want to register it using a different name,
# you can specify a name attribute
# @register.simple_tag(name='name_of_tag')

@register.simple_tag
def total_posts():
    return Post.published.count()


@register.simple_tag(name='most_commented_posts')
def get_most_commented_posts(count=5):
    return Post.published.annotate(total_comments=Count('comments')).order_by('-total_comments')[:count]


@register.inclusion_tag('blog/post/latest_posts.html')
def show_latest_posts(count=5):
    latest_posts = Post.published.order_by('-publish')[:count]
    return {'latest_posts': latest_posts}


# filters are Python functions that take one or two parameters
# teh value of the variable that the filter is applied to, and an optional argument.
# they return a value that can be displayed or treated by another filter.
#
# Django escapes the HTML code generated by filters;
# characters of HTML entities are replaced with their HTML encoded characters.
# use the `mark_safe` function provided by Django to mark the result as safe HTML to be rendered in the template.
@register.filter(name='markdown')
def markdown_format(text):
    return mark_safe(markdown.markdown(text))